/* @flow */
import React, { Component } from 'react';
import { connect } from 'react-redux';

import { RefreshControl } from 'react-native';
import { Container, Content, Spinner, Separator, Text, Button } from 'native-base';

import { getFirebaseData } from '../actions/EventAction';
import EventList from './EventList';
import MyCalendar from './Calendar';
import Event from '../type/Event';
import {State} from '../reducers/EventReducers';
import PushNotification from 'react-native-push-notification';

type Props = {
  dispatch: {},
  isFetching: boolean,
  events: Array<Event>
};

class MainPage extends Component<Props, {}> {
  constructor(props: Props) {
    super(props);
    this.props = props;
  }

  componentDidMount() {
    const { dispatch } = this.props;
    dispatch(getFirebaseData());
  }

  refreshList () {
    const {dispatch} = this.props
    dispatch(getFirebaseData());
  }

  pushNotification () {
    console.log('hello')
    PushNotification.configure({

      // (optional) Called when Token is generated (iOS and Android)
      onRegister: function(token: {}) {
        console.log( 'TOKEN:', token );
      },

      // (required) Called when a remote or local notification is opened or received
      onNotification: function(notification: {}) {
        console.log( 'NOTIFICATION:', notification );
      },

      // ANDROID ONLY: (optional) GCM Sender ID.
      senderID: "YOUR GCM SENDER ID",

      // IOS ONLY (optional): default: all - Permissions to register.
      permissions: {
        alert: true,
        badge: true,
        sound: true
      },

      // Should the initial notification be popped automatically
      // default: true
      popInitialNotification: true,

      /**
       * IOS ONLY: (optional) default: true
       * - Specified if permissions will requested or not,
       * - if not, you must call PushNotificationsHandler.requestPermissions() later
       */
      requestPermissions: true,
    });

    PushNotification.localNotification({
      /* Android Only Properties */
      id: 0, // (optional) default: Autogenerated Unique ID
      title: "My Notification Title", // (optional)
      ticker: "My Notification Ticker", // (optional)
      autoCancel: true,
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
      subText: "This is a subText", // (optional) default: none
      number: 10, // (optional) default: none (Cannot be zero)
      color: "red", // (optional) default: system default

      /* iOS and Android properties */
      message: "My Notification Message" // (required)
    });
    PushNotification.localNotificationSchedule({
      message: "My Notification Message", // (required)
      date: new Date(Date.now() + (1 * 1000)) // in 60 secs
    });
  }

  render(): {} {
    return (
      <Container>
        {((): void => (!this.props.isFetching ?
          <Content
            refreshControl={<RefreshControl
                refreshing={this.props.isFetching}
                onRefresh={this.refreshList.bind(this)}
            />}>
            <Separator bordered style={{backgroundColor: '#F2F2F2'}}>
              <Text>近日開催イベント</Text>
            </Separator>
            <EventList events={this.props.events} isFetching={this.props.isFetching}/>
            <Separator bordered style={{backgroundColor: '#F2F2F2'}}>
              <Text>カレンダー</Text>
            </Separator>
            <MyCalendar events={this.props.events} />
            <Button onPress={this.pushNotification}>
              <Text>Push</Text>
            </Button>
          </Content>
          : <Spinner color="blue" size="large" style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}/>))()}
        </Container>
    );
  }
}

function mapStateToProps(state: State): State {
  return {
    isFetching: state.events.isFetching,
    events: state.events.events,
  };
}

const MainPageContainer = connect(mapStateToProps)(MainPage);

export default MainPageContainer;
